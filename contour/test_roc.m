% test for RoC filter and rod-shaped filterfunction roc = test_roc(data,varargin)%fprintf('%d %d %d %d\n',numel(varargin),varargin{1},varargin{2},varargin{3})if numel(varargin) == 0%RoC filter paramters (dependent on pixel size)%vulcan% cont_shift = 20; %number of points RoC values rotated to orient capture both poles of cotnour% pk_thresh = 0.05; % peak detection threshold for RoC filter% pk_dist = 25; %% minimum allowed distance between two local maxima% collosuscont_shift = 25; %number of points RoC values rotated to orient capture both poles of cotnourpk_thresh = 0.05; % peak detection threshold for RoC filterpk_dist = 20; % minimum allowed distance between two local maximaelse    cont_shift = varargin{1};    pk_thresh = varargin{2};    pk_dist = varargin{3};end% how much variability to tolerate in widthvar_thresh = 0.1; %minimum contour areamin_area = 200;max_area = 3000;%RoC smoothing parameterswindow = 10;%20 %no of points on curvature averagedno_std = 5; %std deviations of gausianroc = 0; % default valueif data.area>min_area && data.area<max_area    % Filter contours based on radius of curvature    % kappa_smooth is truncated 10 points at each to remove    % ambigous peak detection due to edge effects.    % Pill shape cells have one peak of positive curvature    if sum(data.kappa_raw < -0.4) == 0    kappa = data.kappa_raw;    if isempty(kappa)        roc = 0;        return    end    kappaX=(1:3*length(kappa));    d = size(kappa);    if d(1) == 1        kappaY=repmat(kappa,[1,3]);        d1 = size(kappaY);        if d1(2) == 1            kappaY = kappaY';        end        [~,yout2,~]=peakfind(kappaX,kappaY,1,window,no_std);    elseif d(2) == 1        kappaY=repmat(kappa,[3,1]);        d1 = size(kappaY);        if d1(2) == 1            kappaY = kappaY';        end        [~,yout2,~]=peakfind(kappaX,kappaY,1,window,no_std);    end        kappa_smooth= yout2(length(kappa)+1:2*length(kappa))';        KM = circshift(kappa_smooth,cont_shift);        [pks,loc] = findpeaks(KM,'minpeakheight',pk_thresh,'minpeakdistance',pk_dist);        if length(pks)== 2        roc = 1;    else        roc = 0;    endendend